Описание классов и методов кода
===============================
Если вы хотите что-то добавить или улучшить в коде модуля, обязательно ознакомьтесь с описанием используемых
в коде классов и методов, для лучшего понимания структуры кода.

--------------------------------------------------------------------------------------------------------------------------

Файлы исходного кода
--------------------

:main.py: главный файл кода, содержит основную логику управленя методами
:lib.py: Библиотека классов, который работают с биржей и обрабатывают данные
:var.py: Библиотека дата классов, в данном фале храняться классы предназначенные для хранения и быстрого доступа к ключевым переменным

--------------------------------------------------------------------------------------------------------------------------

Версии PIP и Python
+++++++++++++++++++

.. note::
    * PIP >= 22.1.2
    * python >= 3.8

--------------------------------------------------------------------------------------------------------------------------

Дата классы var.py
++++++++++++++++++
Все дата классы представляют доступ к указанным в них переменным из любой точки кода, где будет импортирован файл ``var.py``

.. note::
    * При работе с переменными из дата классов, следует четко придерживаться указанной типизации переменных.
    * Не рекомендуется менять названия уже имеющихся пременных в дата классах

--------------------------------------------------------------------------------------------------------------------------

.. function:: CoinQuery:

.. code-block:: python
    :linenos:
    :emphasize-lines: 3,5
    
    @dataclass
    class CoinQuery:
        ticker : str
        time_frame : str
        response : list
        list_tickers = []
        coin_pref : str = "USDT"
        limit : int = 30

* ``ticker``       - Содержит имя тикера с префиксом "USDT"
* ``time_frame``   - Содержит значение таймфрейма
* ``response``     - Возвращаемый ответ с биржи
* ``list_tickers`` - Список загружаемых с биржи тикеров
* ``coin_pref``    - Префикс для тикера
* ``limit``        - Лимит количества запрашиваемых данных 

Данный класс используется для работы запросов на биржу.

--------------------------------------------------------------------------------------------------------------------------

.. function:: Service:

.. code-block:: python
    :linenos:
    :emphasize-lines: 3,5
    
    @dataclass
    class Service:
        NameFolderReport: str = ""
        TimeFrameList = []
        RequestOptions = []
        RequestName = []
        CountRequest : int = 0
        NumberRequest : int = 0
        CountInParams : int = 0

* ``TimeFrameList``  - Содержит список доступных тайм фреймов
* ``RequestOptions`` - Содержит список доступных запросов
* ``RequestName``    - Содержит список имен методов для доступных запросов
* ``CountRequest``   - Содержит количество запросов
* ``NumberRequest``  - Содержит номер запроса
* ``CountInParams``  - Содержит количество параметров принимаемых методом
* ``NameFolderReport``  - Хранит имя директории в которую сохраняются отчеты. 

Данный класс используется для хранения данных, которые используются для определения запроса, и обработки ответов.

--------------------------------------------------------------------------------------------------------------------------

.. function:: ModuleName:

.. code-block:: python
    :linenos:
    :emphasize-lines: 1,3
    
    @dataclass
    class ModuleName:
        name : str
        font : str

* ``name`` - Содержит название модуля
* ``font`` - Содержит имя шрифта для названия

Данный клас используется при печати логотипа модуля(Так как модуль можно запускать как самостоятельное приложение).

--------------------------------------------------------------------------------------------------------------------------

.. function:: QueryKey:

.. code-block:: python
    :linenos:
    :emphasize-lines: 1,3
    
    @dataclass
    class QueryKey:
        server_time : str = "serverTime"
        exch_info : str = "symbols"
        exch_info_items : str = "symbol"

* ``server_time``     - Содержит содержит время сервера биржи
* ``exch_info``       - Содержит общий ответ при создании дампа тикеров
* ``exch_info_items`` - Содержит ключ для парсинга дампа тикеров

Данный класс предназначен для хранения общего ответа с биржи при запросе дампа тикеров и ключ, по которому парсится ответ
создовая список тикеров.

--------------------------------------------------------------------------------------------------------------------------

.. function:: GlossaryOutput:

.. code-block:: python
    :linenos:
    :emphasize-lines: 1,3
    
    @dataclass
    class GlossaryOutput:
        ...

Данный класс предназначен для хранения текстовых сообщений, используемых для информирования пользователя.

--------------------------------------------------------------------------------------------------------------------------

.. function:: GraphXY:

.. code-block:: python
    :linenos:
    :emphasize-lines: 1,3
    
    @dataclass
    class GraphXY:
        x_time = []
        y_sellVol = []
        y_buyVol = []
        y_sumOI = []
        y_sumOIVal = []
        y_longAcc = []
        y_shortAcc = []
        y_lsRatio = []

Данный класс предназначен для хранения значений из запроса с биржи с последующим их добавлением на график.

--------------------------------------------------------------------------------------------------------------------------

Классы и методы lib.py
++++++++++++++++++++++

Библиотека ``lib.py`` содержит все классы и методы для работы с данными

.. note::
    В данной библиотеки есть дата класс ``WriteMethod`` который не вошел в ``var.py``, это связано с тем, 
    что он содержит имена методов класса ``WriteDataFile`` . Использование его в ``var.py``
    приводило к зацикливанию импортов между ``var.py`` и ``lib.py``.

--------------------------------------------------------------------------------------------------------------------------

.. function:: ServerGetData:

.. code-block:: python
    :linenos:
    :emphasize-lines: 1,4
    
    def dump_ticker()
    def connect_exchange()
    def get_server_time()
    def request_data()

* ``def dump_ticker()``     - Запрашивает и сохраняет список тикеров
* ``def get_server_time()`` - Получает время с сервера биржи
* ``def request_data()``    - Вызывает методы запроса для получения данных из API Binance

--------------------------------------------------------------------------------------------------------------------------

.. function:: SysExit:

.. code-block:: python
    :linenos:
    :emphasize-lines: 1,2
    
    def sigint_handler()
    def exit_key()

Данный класс предназначен для отслеживания нажатия ``Ctrl+C`` для корректного завершения кода

--------------------------------------------------------------------------------------------------------------------------

.. function:: Patch:

.. code-block:: python
    :linenos:
    :emphasize-lines: 1,1
    
    def create_folder()

* ``def create_folder()`` - Создает директорию для сохранения в файл полученных с биржи данных

--------------------------------------------------------------------------------------------------------------------------

.. function:: Covert:

.. code-block:: python
    :linenos:
    :emphasize-lines: 1,1
    
    def list_str()

* ``def list_str()`` - Конвертация списка в строку, что бы не использовать ``' '.join()`` в основном коде

------------------------------------------------------------------------------------------------------------------------

.. function:: LogoPrint:

.. code-block:: python
    :linenos:
    :emphasize-lines: 1,1
    
    def logo()

* ``def logo()`` - Вывод лого для модуля, опционально, можно удалить если не нужен.

------------------------------------------------------------------------------------------------------------------------

.. function:: UserInput:

.. code-block:: python
    :linenos:
    :emphasize-lines: 1,3
    
    def get_ticker()
    def get_time_frame()
    def get_number()

* ``def get_ticker()``     - Получения и проверки тикера
* ``def get_time_frame()`` - Получения и проверки таймфрейма
* ``def get_number()``     - Определения пользователем, какой тип данных он хочет запросить

------------------------------------------------------------------------------------------------------------------------

.. function:: RequestList:

.. code-block:: python
    :linenos:
    :emphasize-lines: 1,1
    
    def printl()

* ``def printl()`` - Вывод нумерованного списка доступных запросов на биржу

------------------------------------------------------------------------------------------------------------------------

.. function:: WriteDataFile:

.. code-block:: python
    :linenos:
    :emphasize-lines: 1,1
    
    def write_taker_long_short_ratio()
    def write_long_short_position_ratio()
    def write_long_short_account_ratio()
    def write_open_interest_hist()

* ``WRITE_DATA_FILE`` - Содержит методы для записи выбранных данных в виде таблицы в текстовый файл

------------------------------------------------------------------------------------------------------------------------

.. function:: GetWriteMethod:

.. code-block:: python
    :linenos:
    :emphasize-lines: 1,1
    
    def get_method()

* ``get_method()`` - Получение от пользователя информации, какой метод использовать для запроса на биржу

------------------------------------------------------------------------------------------------------------------------

.. function:: GraphTools:

.. code-block:: python
    :linenos:
    :emphasize-lines: 1,1
    
    def formation_data()
    def create_graph()

* ``gdef formation_data()`` - Подготовка полученных данных к внесению их на график
* ``gdef create_graph()`` - Формирование и запись в файл графика с данными из запроса с биржи
